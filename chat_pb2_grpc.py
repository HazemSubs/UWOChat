# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/main.ChatService/login',
                request_serializer=chat__pb2.loginRequest.SerializeToString,
                response_deserializer=chat__pb2.loginStatus.FromString,
                )
        self.logout = channel.unary_unary(
                '/main.ChatService/logout',
                request_serializer=chat__pb2.logoutRequest.SerializeToString,
                response_deserializer=chat__pb2.logoutStatus.FromString,
                )
        self.sendMessage = channel.unary_unary(
                '/main.ChatService/sendMessage',
                request_serializer=chat__pb2.messagePackage.SerializeToString,
                response_deserializer=chat__pb2.sendMessageStatus.FromString,
                )
        self.addServer = channel.unary_unary(
                '/main.ChatService/addServer',
                request_serializer=chat__pb2.addServerRequest.SerializeToString,
                response_deserializer=chat__pb2.addServerResponse.FromString,
                )
        self.getUsers = channel.unary_unary(
                '/main.ChatService/getUsers',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.getUsersResponse.FromString,
                )
        self.getMessages = channel.unary_unary(
                '/main.ChatService/getMessages',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.getMessagesResponse.FromString,
                )
        self.getKnownServers = channel.unary_unary(
                '/main.ChatService/getKnownServers',
                request_serializer=chat__pb2.Empty.SerializeToString,
                response_deserializer=chat__pb2.getKnownServersResponse.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """Login request to display user in connections list, returns whether the user was connected or not or returning list of connected users.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request, context):
        """If a client send a message, return the status of said message (successful/unsucessful).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getKnownServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=chat__pb2.loginRequest.FromString,
                    response_serializer=chat__pb2.loginStatus.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=chat__pb2.logoutRequest.FromString,
                    response_serializer=chat__pb2.logoutStatus.SerializeToString,
            ),
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=chat__pb2.messagePackage.FromString,
                    response_serializer=chat__pb2.sendMessageStatus.SerializeToString,
            ),
            'addServer': grpc.unary_unary_rpc_method_handler(
                    servicer.addServer,
                    request_deserializer=chat__pb2.addServerRequest.FromString,
                    response_serializer=chat__pb2.addServerResponse.SerializeToString,
            ),
            'getUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.getUsers,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.getUsersResponse.SerializeToString,
            ),
            'getMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.getMessages,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.getMessagesResponse.SerializeToString,
            ),
            'getKnownServers': grpc.unary_unary_rpc_method_handler(
                    servicer.getKnownServers,
                    request_deserializer=chat__pb2.Empty.FromString,
                    response_serializer=chat__pb2.getKnownServersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/login',
            chat__pb2.loginRequest.SerializeToString,
            chat__pb2.loginStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/logout',
            chat__pb2.logoutRequest.SerializeToString,
            chat__pb2.logoutStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/sendMessage',
            chat__pb2.messagePackage.SerializeToString,
            chat__pb2.sendMessageStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/addServer',
            chat__pb2.addServerRequest.SerializeToString,
            chat__pb2.addServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/getUsers',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.getUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/getMessages',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.getMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getKnownServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.ChatService/getKnownServers',
            chat__pb2.Empty.SerializeToString,
            chat__pb2.getKnownServersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
